<?php
/**
 * @author stev leibelt <artodeto@bazzline.net>
 * @since 2014-04-23 
 */

namespace Service;

use InvalidArgumentException;

/**
 * Class Locator
 * @package Service
 * @todo this has to become a skeleton file which gets written/generated by a php script to hardcore database usage/factory and so one
 */
class Locator
{
    /** @var \Database\DatabaseInterface */
    private $database;

    /** @var array */
    private $defaultInstancePool = array();

    /** @var array */
    private $factoryInstancePool = array();

    /** @var array */
    private $sharedInstancePool = array();

    /**
     * @todo to tired but we have to get rid of the private property database and use the instance pool
     * @return \Database\DatabaseInterface|mixed
     */
    public function getDatabase()
    {
        if (is_null($this->database)) {
            $factory = $this->getDatabaseFactory();
            $this->database = $factory->create($this);
        }

        return $this->database;
    }

    /**
     * @return Factory\FactoryInterface
     */
    protected function getDatabaseFactory()
    {
        return $this->getFactoryFromInstancePool('\Service\Factory\FileDatabaseFactory');
    }

    /**
     * @param string $className
     * @return \Service\Factory\FactoryInterface
     * @throws \InvalidArgumentException
     */
    protected final function getFactoryFromInstancePool($className)
    {
        return $this->fetchFromInstancePool($className, 'factory');
    }

    /**
     * @param string $className
     * @param string $type
     * @return object
     * @throws \InvalidArgumentException
     */
    protected final function fetchFromInstancePool($className, $type)
    {
        $key = $this->generateInstancePoolKey($className);
        if (!$this->isInInstancePool($key, $type)) {
            if (!class_exists($className)) {
                throw new InvalidArgumentException('Class name "' , $className . '" does not exist');
            }

            $this->addToInstancePool(new $className(), $key, $type);
        }

        return $this->getFromInstancePool($key, $type);
    }

    /**
     * @param string $key
     * @param string $type
     * @return object
     * @throws \InvalidArgumentException
     */
    private function getFromInstancePool($key, $type)
    {
        switch ($type) {
            case 'factory';
                return $this->factoryInstancePool[$key];
                break;
            case 'shared':
                return $this->sharedInstancePool[$key];
                break;
            default:
                return $this->defaultInstancePool[$key];
                break;
        }
    }

    /**
     * @param object $instance
     * @param string $key
     * @param string $type
     */
    private function addToInstancePool($instance, $key, $type)
    {
        switch ($type) {
            case 'factory';
                $this->factoryInstancePool[$key] = $instance;
                break;
            case 'shared':
                $this->sharedInstancePool[$key] = $instance;
                break;
            default:
                $this->defaultInstancePool[$key] = $instance;
                break;
        }
    }

    /**
     * @param string $key
     * @param string $type
     * @return bool
     */
    private function isInInstancePool($key, $type)
    {
        switch ($type) {
            case 'factory';
                return (isset($this->factoryInstancePool[$key]));
                break;
            case 'shared':
                return (isset($this->sharedInstancePool[$key]));
                break;
            default:
                return (isset($this->defaultInstancePool[$key]));
                break;
        }
    }

    /**
     * @param string $className
     * @return string
     */
    private function generateInstancePoolKey($className)
    {
        return sha1($className);
    }
} 